# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/hpricot/all/hpricot.rbi
#
# hpricot-0.8.6
module Hpricot
  def self.XML(input = nil, opts = nil, &blk); end
  def self.buffer_size; end
  def self.buffer_size=(arg0); end
  def self.build(ele = nil, assigns = nil, &blk); end
  def self.css(arg0, arg1, arg2); end
  def self.make(input = nil, opts = nil, &blk); end
  def self.parse(input = nil, opts = nil, &blk); end
  def self.scan(*arg0); end
  def self.uxs(str); end
end
class Anonymous_Object_26
  def allowed; end
  def allowed=(arg0); end
  def children; end
  def children=(arg0); end
  def etag; end
  def etag=(arg0); end
  def name; end
  def name=(arg0); end
  def parent; end
  def parent=(arg0); end
  def raw_attributes; end
  def raw_attributes=(arg0); end
  def raw_string; end
  def raw_string=(arg0); end
  def tagno; end
  def tagno=(arg0); end
end
class Anonymous_Object_25
  def name; end
  def name=(arg0); end
  def parent; end
  def parent=(arg0); end
  def raw_attributes; end
  def raw_attributes=(arg0); end
end
class Anonymous_Object_24
  def name; end
  def name=(arg0); end
  def parent; end
  def parent=(arg0); end
end
class Hpricot::CData < Anonymous_Object_24
  def content; end
  def content=(arg0); end
  def initialize(content); end
  def inner_text; end
  def output(out, opts = nil); end
  def raw_string; end
  def to_plain_text; end
  def to_s; end
  include Hpricot::CData::Trav
  include Hpricot::Leaf
end
class Hpricot::Comment < Anonymous_Object_24
  def content; end
  def content=(arg0); end
  def output(out, opts = nil); end
  def pathname; end
  def raw_string; end
  include Hpricot::Comment::Trav
  include Hpricot::Leaf
end
class Hpricot::DocType < Anonymous_Object_25
  def clear_raw; end
  def initialize(target, pub, sys); end
  def output(out, opts = nil); end
  def pathname; end
  def public_id; end
  def public_id=(arg0); end
  def raw_string; end
  def system_id; end
  def system_id=(arg0); end
  def target; end
  def target=(arg0); end
  include Hpricot::DocType::Trav
  include Hpricot::Leaf
end
class Hpricot::Elem < Anonymous_Object_26
  def attributes; end
  def attributes_as_html; end
  def clear_raw; end
  def empty?; end
  def initialize(tag, attrs = nil, children = nil, etag = nil); end
  def inspect; end
  def inspect_tree(depth = nil); end
  def output(out, opts = nil); end
  def pathname; end
  def pretty_print(q); end
  def pretty_print_stag(q); end
  def to_plain_text; end
  include Hpricot::Container
  include Hpricot::Elem::Trav
end
class Hpricot::BogusETag < Anonymous_Object_25
  def clear_raw; end
  def initialize(name); end
  def output(out, opts = nil); end
  def pretty_print(q); end
  def raw_string; end
  include Hpricot::BogusETag::Trav
  include Hpricot::Leaf
end
class Hpricot::Text < Anonymous_Object_24
  def <<(str); end
  def clear_raw; end
  def content; end
  def content=(arg0); end
  def initialize(content); end
  def inner_text; end
  def output(out, opts = nil); end
  def pathname; end
  def pretty_print(q); end
  def raw_string; end
  def to_plain_text; end
  def to_s; end
  include Hpricot::Leaf
  include Hpricot::Text::Trav
end
class Hpricot::XMLDecl < Anonymous_Object_25
  def clear_raw; end
  def encoding; end
  def encoding=(arg0); end
  def output(out, opts = nil); end
  def pathname; end
  def raw_string; end
  def standalone; end
  def standalone=(arg0); end
  def version; end
  def version=(arg0); end
  include Hpricot::Leaf
  include Hpricot::XMLDecl::Trav
end
class Hpricot::ProcIns < Anonymous_Object_25
  def content; end
  def content=(arg0); end
  def output(out, opts = nil); end
  def pathname; end
  def raw_string; end
  def target; end
  def target=(arg0); end
  include Hpricot::Leaf
  include Hpricot::ProcIns::Trav
end
class Hpricot::Doc < Anonymous_Object_26
  def altered!; end
  def inspect; end
  def inspect_tree; end
  def make(input = nil, &blk); end
  def output(out, opts = nil); end
  def pretty_print(q); end
  include Hpricot::Container
  include Hpricot::Doc::Trav
end
module Hpricot::Node
  def altered!; end
  def clear_raw; end
  def html_quote(str); end
  def if_output(opts); end
  def inspect_tree(depth = nil); end
  def pathname; end
  include Hpricot
end
class Hpricot::Attributes
  def [](k); end
  def []=(k, v); end
  def element; end
  def element=(arg0); end
  def initialize(e); end
  def inspect; end
  def to_hash; end
  def to_s; end
end
class Hpricot::ETag < Hpricot::BogusETag
  def inspect; end
  def output(out, opts = nil); end
  def pretty_print(q); end
  include Hpricot::Node
  include Hpricot::Tag
end
class Hpricot::Name
  include Hpricot
end
class Hpricot::Context
  include Hpricot
end
module Hpricot::Tag
  include Hpricot
end
module Hpricot::Container
  include Hpricot::Node
end
module Hpricot::Leaf
  def inspect; end
  def pretty_print(q); end
  include Hpricot::Node
end
module Hpricot::Traverse
  def %(expr); end
  def /(expr, &blk); end
  def after(html = nil, &blk); end
  def at(expr); end
  def before(html = nil, &blk); end
  def bogusetag?; end
  def children_of_type(tag_name); end
  def clean_path(path); end
  def comment?; end
  def css_path; end
  def doc?; end
  def doctype?; end
  def elem?; end
  def following; end
  def get_subnode(*indexes); end
  def html(inner = nil, &blk); end
  def index(name); end
  def innerHTML(inner = nil, &blk); end
  def innerHTML=(inner); end
  def innerText; end
  def inner_html(inner = nil, &blk); end
  def inner_html=(inner); end
  def inner_text; end
  def make(input = nil, &blk); end
  def next; end
  def next_node; end
  def node_position; end
  def nodes_at(*pos); end
  def position; end
  def preceding; end
  def previous; end
  def previous_node; end
  def procins?; end
  def reparent(nodes); end
  def search(expr, &blk); end
  def self.filter(tok, &blk); end
  def swap(html = nil, &blk); end
  def text?; end
  def to_html; end
  def to_original_html; end
  def to_plain_text; end
  def to_s; end
  def traverse_element(*names, &block); end
  def traverse_text(&block); end
  def xmldecl?; end
  def xpath; end
end
module Hpricot::Container::Trav
  def classes; end
  def containers; end
  def each_child(&block); end
  def each_child_with_index(&block); end
  def each_hyperlink; end
  def each_hyperlink_attribute; end
  def each_hyperlink_uri(base_uri = nil); end
  def each_uri(base_uri = nil); end
  def filter(&block); end
  def find_element(*names); end
  def following_siblings; end
  def get_element_by_id(id); end
  def get_elements_by_tag_name(*a); end
  def insert_after(nodes, ele); end
  def insert_before(nodes, ele); end
  def next_sibling; end
  def preceding_siblings; end
  def previous_sibling; end
  def replace_child(old, new); end
  def siblings_at(*pos); end
  def traverse_text_internal(&block); end
  include Hpricot::Traverse
end
module Hpricot::Leaf::Trav
  def traverse_all_element; end
  def traverse_some_element(name_set); end
  def traverse_text_internal; end
  include Hpricot::Traverse
end
module Hpricot::Doc::Trav
  def author; end
  def css_path; end
  def root; end
  def title; end
  def traverse_all_element(&block); end
  def traverse_some_element(name_set, &block); end
  def xpath; end
  include Hpricot::Container::Trav
end
module Hpricot::Elem::Trav
  def [](name); end
  def []=(name, val); end
  def get_attribute(name); end
  def has_attribute?(name); end
  def remove_attribute(name); end
  def set_attribute(name, val); end
  def traverse_all_element(&block); end
  def traverse_some_element(name_set, &block); end
  include Hpricot::Container::Trav
end
module Hpricot::CData::Trav
  include Hpricot::Leaf::Trav
end
module Hpricot::Text::Trav
  def traverse_text_internal; end
  include Hpricot::Leaf::Trav
end
module Hpricot::XMLDecl::Trav
  include Hpricot::Leaf::Trav
end
module Hpricot::DocType::Trav
  include Hpricot::Leaf::Trav
end
module Hpricot::ProcIns::Trav
  include Hpricot::Leaf::Trav
end
module Hpricot::Comment::Trav
  include Hpricot::Leaf::Trav
end
module Hpricot::BogusETag::Trav
  include Hpricot::Leaf::Trav
end
class Hpricot::Error < StandardError
end
class Hpricot::Elements < Array
  def %(expr, &blk); end
  def /(*expr, &blk); end
  def add_class(class_name); end
  def after(str = nil, &blk); end
  def append(str = nil, &blk); end
  def at(expr, &blk); end
  def attr(key, value = nil, &blk); end
  def before(str = nil, &blk); end
  def copy_node(node, l); end
  def empty; end
  def filter(expr); end
  def html(*string); end
  def html=(string); end
  def innerHTML(*string); end
  def innerHTML=(string); end
  def inner_html(*string); end
  def inner_html=(string); end
  def inner_text; end
  def inspect; end
  def not(expr); end
  def prepend(str = nil, &blk); end
  def pretty_print(q); end
  def remove; end
  def remove_attr(name); end
  def remove_class(name = nil); end
  def search(*expr, &blk); end
  def self.expand(ele1, ele2, excl = nil); end
  def self.filter(nodes, expr, truth = nil); end
  def set(key, value = nil, &blk); end
  def text; end
  def to_html; end
  def to_s; end
  def wrap(str = nil, &blk); end
end
class Object < BasicObject
  def Hpricot(input = nil, opts = nil, &blk); end
  def self.hpricot_slate_method_added(arg0); end
  def self.method_added(name); end
end
class Hpricot::EncodingError < StandardError
end
class Hpricot::XHTMLStrict
  def self.doctype; end
  def self.doctype=(arg0); end
  def self.forms; end
  def self.forms=(arg0); end
  def self.self_closing; end
  def self.self_closing=(arg0); end
  def self.tags; end
  def self.tags=(arg0); end
  def self.tagset; end
  def self.tagset=(arg0); end
end
class Hpricot::XHTMLTransitional
  def self.doctype; end
  def self.doctype=(arg0); end
  def self.forms; end
  def self.forms=(arg0); end
  def self.self_closing; end
  def self.self_closing=(arg0); end
  def self.tags; end
  def self.tags=(arg0); end
  def self.tagset; end
  def self.tagset=(arg0); end
end
class String
  def fast_xs; end
end
class Hpricot::BlankSlate
  def self.hide(name); end
end
module Kernel
  def self.hpricot_slate_method_added(arg0); end
  def self.method_added(name); end
end
module Hpricot::Builder
  def <<(string); end
  def a(*args, &block); end
  def abbr(*args, &block); end
  def acronym(*args, &block); end
  def add_child(ele); end
  def address(*args, &block); end
  def applet(*args, &block); end
  def area(*args, &block); end
  def b(*args, &block); end
  def base(*args, &block); end
  def basefont(*args, &block); end
  def bdo(*args, &block); end
  def big(*args, &block); end
  def blockquote(*args, &block); end
  def body(*args, &block); end
  def br(*args, &block); end
  def build(*a, &b); end
  def button(*args, &block); end
  def caption(*args, &block); end
  def center(*args, &block); end
  def cite(*args, &block); end
  def code(*args, &block); end
  def col(*args, &block); end
  def colgroup(*args, &block); end
  def concat(string); end
  def dd(*args, &block); end
  def del(*args, &block); end
  def dfn(*args, &block); end
  def dir(*args, &block); end
  def div(*args, &block); end
  def dl(*args, &block); end
  def doctype(target, pub, sys); end
  def dt(*args, &block); end
  def em(*args, &block); end
  def fieldset(*args, &block); end
  def font(*args, &block); end
  def form(*args, &block); end
  def h1(*args, &block); end
  def h2(*args, &block); end
  def h3(*args, &block); end
  def h4(*args, &block); end
  def h5(*args, &block); end
  def h6(*args, &block); end
  def head(*args, &block); end
  def hr(*args, &block); end
  def html(*args, &block); end
  def html_tag(sym, *args, &block); end
  def i(*args, &block); end
  def iframe(*args, &block); end
  def img(*args, &block); end
  def input(*args, &block); end
  def ins(*args, &block); end
  def isindex(*args, &block); end
  def kbd(*args, &block); end
  def label(*args, &block); end
  def legend(*args, &block); end
  def li(*args, &block); end
  def link(*args, &block); end
  def map(*args, &block); end
  def menu(*args, &block); end
  def meta(*args, &block); end
  def noframes(*args, &block); end
  def noscript(*args, &block); end
  def object(*args, &block); end
  def ol(*args, &block); end
  def optgroup(*args, &block); end
  def option(*args, &block); end
  def p(*args, &block); end
  def param(*args, &block); end
  def pre(*args, &block); end
  def q(*args, &block); end
  def s(*args, &block); end
  def samp(*args, &block); end
  def script(*args, &block); end
  def select(*args, &block); end
  def self.set(option, value); end
  def small(*args, &block); end
  def span(*args, &block); end
  def strike(*args, &block); end
  def strong(*args, &block); end
  def style(*args, &block); end
  def sub(*args, &block); end
  def sup(*args, &block); end
  def table(*args, &block); end
  def tag!(tag, *args, &block); end
  def tbody(*args, &block); end
  def td(*args, &block); end
  def text!(string); end
  def text(string); end
  def textarea(*args, &block); end
  def tfoot(*args, &block); end
  def th(*args, &block); end
  def thead(*args, &block); end
  def title(*args, &block); end
  def tr(*args, &block); end
  def tt(*args, &block); end
  def u(*args, &block); end
  def ul(*args, &block); end
  def var(*args, &block); end
  def xhtml_html(attrs = nil, &block); end
  def xhtml_strict(attrs = nil, &block); end
  def xhtml_transitional(attrs = nil, &block); end
end
class Hpricot::CssProxy < Hpricot::BlankSlate
  def initialize(builder, sym); end
  def method_missing(id_or_class, *args, &block); end
end
